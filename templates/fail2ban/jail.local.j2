#jinja2: trim_blocks: True, lstrip_blocks: True
{{ ansible_managed | comment }}

# =============================================================================
# Fail2ban Jail Configuration File
# =============================================================================
# This file contains jail-specific configuration that overrides the default
# settings in jail.conf. It defines local customizations for Fail2ban jails
# including ban policies, filtering rules, and email notifications.
#
# Generated by Ansible - Manual changes will be overwritten
# Template: {{ ansible_role_name }}/templates/fail2ban/jail.local.j2
# =============================================================================

# Overrides values from the jail.conf configuration file.

[DEFAULT]

# "bantime" is the number of seconds that a host is banned.
bantime = {{ fail2ban_bantime }}

# A host is banned if it has generated "maxretry" during the last "findtime" seconds.
findtime = {{ fail2ban_findtime }}

# "maxretry" is the number of failures before a host get banned.
maxretry = {{ fail2ban_maxretry }}

# "protocol" specifies the type of the service (tcp or udp).
protocol = {{ fail2ban_protocol }}

# "ignoreself" specifies whether the local resp. own IP addresses should be ignored
# (default is true). Fail2ban will not ban a host which matches such addresses.
ignoreself = {{ 'true' if fail2ban_ignoreself | bool else 'false' }}

# "ignoreip" can be a list of IP addresses, CIDR masks or DNS hosts. Fail2ban
# will not ban a host which matches an address in this list. Several addresses
# can be defined using space (and/or comma) separator.
ignoreip = {{ fail2ban_ignoreip | join(' ') }}

# Email configuration for notifications
destemail = {{ fail2ban_destemail }}
sender = {{ fail2ban_sender }}
mta = {{ fail2ban_mta }}

{% if fail2ban_email_notification_enabled %}
# Email notifications are enabled
action = %(action_mwl)s
{% else %}
# Default action. Will block user and log lines.
action = %(action_)s
{% endif %}
{% if fail2ban_role_mode == "nftables" %}
# configure nftables
banaction = nftables-multiport
chain = input
{% endif -%}
{% if fail2ban_role_mode == "iptables" %}
# configure iptables
banaction = iptables-multiport
chain = INPUT
{% endif %}

# Progressive ban time settings
{% if fail2ban_bantime_increment %}
# "bantime.increment" allows to use database for searching of previously banned ip's to increase a
# default ban time using special formula, default it is banTime * 1, 2, 4, 8, 16, 32...
bantime.increment = true

# "bantime.rndtime" is the max number of seconds using for mixing with random time
# to prevent "clever" botnets calculate exact time IP can be unbanned again:
bantime.rndtime = {{ fail2ban_bantime_rndtime }}

# "bantime.maxtime" is the max number of seconds using the ban time can reach (don't grows further)
bantime.maxtime = {{ fail2ban_bantime_maxtime }}

# "bantime.factor" is a coefficient to calculate exponent growing of the formula or common multiplier,
# default value of factor is 1 and with default value of formula, the ban time
# grows by 1, 2, 4, 8, 16 ...
bantime.factor = {{ fail2ban_bantime_factor }}
{% endif %}

# Database purge settings
dbpurgeage = {{ fail2ban_dbpurgeage }}
