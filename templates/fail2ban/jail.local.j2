#jinja2: trim_blocks: True, lstrip_blocks: True
{{ ansible_managed | comment }}


[DEFAULT]

# == ACTIONS

# Destination email address used solely for the interpolations in
# jail.{conf,local,d/*} configuration files.
destemail = {{ fail2ban_destemail }}
{% if fail2ban_sender is defined %}
# Sender email address used solely for some actions
sender = {{ fail2ban_sender }}
{% endif %}
# email action. Since 0.8.1 upstream fail2ban uses sendmail
# MTA for the mailing. Change mta configuration parameter to mail
# if you want to revert to conventional 'mail'.
mta = {{ fail2ban_mta }}
# Default protocol
protocol = {{ fail2ban_protocol }}


# == MISCELLANEOUS OPTIONS

# "ignoreip" can be an IP address, a CIDR mask or a DNS host
ignoreself = {{ fail2ban_ignoreself }}
ignoreip = {{ fail2ban_ignoreip | join(' ') }}
bantime  = {{ fail2ban_bantime }}
maxretry = {{ fail2ban_maxretry }}
findtime = {{ fail2ban_findtime }}
# "bantime.increment" allows to use database for searching of previously banned ip's to increase a
# default ban time using special formula, default it is banTime * 1, 2, 4, 8, 16, 32...
bantime.increment = {{ fail2ban_bantime_increment }}
# "bantime.rndtime" is the max number of seconds using for mixing with random time
# to prevent "clever" botnets calculate exact time IP can be unbanned again:
bantime.rndtime = {{ fail2ban_bantime_rndtime }}
# "bantime.maxtime" is the max number of seconds using the ban time can reach (don't grows further)
bantime.maxtime = {{ fail2ban_bantime_maxtime }}
# "bantime.factor" is a coefficient to calculate exponent growing of the formula or common multiplier,
# default value of factor is 1 and with default value of formula, the ban time
# grows by 1, 2, 4, 8, 16 ...
bantime.factor = {{ fail2ban_bantime_factor }}
# purge database entries after
dbpurgeage = {{ fail2ban_dbpurgeage }}
{% if fail2ban_email_notification_enabled %}
# Default action. Will block user and send you an email with whois content and log lines.
action = %(action_mwl)s
{% else %}
# Default action. Will block user and log lines.
action = %(action_)s
{% endif %}
{% if fail2ban_role_mode == "nftables" %}
# configure nftables
banaction = nftables-multiport
chain = input
{% endif -%}
{% if fail2ban_role_mode == "iptables" %}
# configure iptables
banaction = iptables-multiport
chain = INPUT
{% endif %}
